// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protein_pep_hash.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "protein_pep_hash.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace peptide_hash_database {

namespace {

const ::google::protobuf::Descriptor* phd_protein_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  phd_protein_reflection_ = NULL;
const ::google::protobuf::Descriptor* phd_peptide_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  phd_peptide_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* phd_peptide_peptide_type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* phd_header_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  phd_header_reflection_ = NULL;
const ::google::protobuf::Descriptor* phd_peptide_mass_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  phd_peptide_mass_reflection_ = NULL;
const ::google::protobuf::Descriptor* phd_file_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  phd_file_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_protein_5fpep_5fhash_2eproto() {
  protobuf_AddDesc_protein_5fpep_5fhash_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "protein_pep_hash.proto");
  GOOGLE_CHECK(file != NULL);
  phd_protein_descriptor_ = file->message_type(0);
  static const int phd_protein_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(phd_protein, phdpro_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(phd_protein, phdpro_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(phd_protein, phdpro_pepseq_),
  };
  phd_protein_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      phd_protein_descriptor_,
      phd_protein::default_instance_,
      phd_protein_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(phd_protein, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(phd_protein, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(phd_protein));
  phd_peptide_descriptor_ = file->message_type(1);
  static const int phd_peptide_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(phd_peptide, phdpep_protein_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(phd_peptide, phdpep_pepstart_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(phd_peptide, phdpep_peplen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(phd_peptide, phdpep_type_),
  };
  phd_peptide_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      phd_peptide_descriptor_,
      phd_peptide::default_instance_,
      phd_peptide_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(phd_peptide, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(phd_peptide, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(phd_peptide));
  phd_peptide_peptide_type_descriptor_ = phd_peptide_descriptor_->enum_type(0);
  phd_header_descriptor_ = file->message_type(2);
  static const int phd_header_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(phd_header, phdhdr_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(phd_header, phdhdr_protein_source_filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(phd_header, phdhdr_protein_source_file_digest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(phd_header, phdhdr_num_proteins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(phd_header, phdhdr_hash_file_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(phd_header, phdhdr_hash_file_digest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(phd_header, phdhdr_precut_amino_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(phd_header, phdhdr_postcut_amino_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(phd_header, phdhdr_prenocut_amino_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(phd_header, phdhdr_postnocut_amino_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(phd_header, phdhdr_missed_cleavage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(phd_header, phdhdr_semi_tryptic_),
  };
  phd_header_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      phd_header_descriptor_,
      phd_header::default_instance_,
      phd_header_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(phd_header, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(phd_header, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(phd_header));
  phd_peptide_mass_descriptor_ = file->message_type(3);
  static const int phd_peptide_mass_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(phd_peptide_mass, phdpmass_mass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(phd_peptide_mass, phdpmass_peptide_list_),
  };
  phd_peptide_mass_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      phd_peptide_mass_descriptor_,
      phd_peptide_mass::default_instance_,
      phd_peptide_mass_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(phd_peptide_mass, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(phd_peptide_mass, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(phd_peptide_mass));
  phd_file_descriptor_ = file->message_type(4);
  static const int phd_file_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(phd_file, phdhdr_),
  };
  phd_file_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      phd_file_descriptor_,
      phd_file::default_instance_,
      phd_file_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(phd_file, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(phd_file, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(phd_file));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_protein_5fpep_5fhash_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    phd_protein_descriptor_, &phd_protein::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    phd_peptide_descriptor_, &phd_peptide::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    phd_header_descriptor_, &phd_header::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    phd_peptide_mass_descriptor_, &phd_peptide_mass::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    phd_file_descriptor_, &phd_file::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_protein_5fpep_5fhash_2eproto() {
  delete phd_protein::default_instance_;
  delete phd_protein_reflection_;
  delete phd_peptide::default_instance_;
  delete phd_peptide_reflection_;
  delete phd_header::default_instance_;
  delete phd_header_reflection_;
  delete phd_peptide_mass::default_instance_;
  delete phd_peptide_mass_reflection_;
  delete phd_file::default_instance_;
  delete phd_file_reflection_;
}

void protobuf_AddDesc_protein_5fpep_5fhash_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026protein_pep_hash.proto\022\025peptide_hash_d"
    "atabase\"L\n\013phd_protein\022\023\n\013phdpro_name\030\001 "
    "\002(\t\022\021\n\tphdpro_id\030\002 \002(\005\022\025\n\rphdpro_pepseq\030"
    "\003 \002(\t\"\231\002\n\013phd_peptide\022\031\n\021phdpep_protein_"
    "id\030\001 \002(\005\022\027\n\017phdpep_pepstart\030\002 \002(\005\022\025\n\rphd"
    "pep_peplen\030\003 \002(\005\022D\n\013phdpep_type\030\004 \002(\0162/."
    "peptide_hash_database.phd_peptide.peptid"
    "e_type\"y\n\014peptide_type\022\013\n\007TRYPTIC\020\001\022\020\n\014T"
    "RYPTIC_MISS\020\002\022\020\n\014TRYPTIC_LEFT\020\003\022\021\n\rTRYPT"
    "IC_RIGHT\020\004\022\021\n\rTRYPTIC_MLEFT\020\005\022\022\n\016TRYPTIC"
    "_MRIGHT\020\006\"\213\003\n\nphd_header\022\026\n\016phdhdr_versi"
    "on\030\001 \002(\005\022&\n\036phdhdr_protein_source_filena"
    "me\030\002 \002(\t\022)\n!phdhdr_protein_source_file_d"
    "igest\030\003 \002(\t\022\033\n\023phdhdr_num_proteins\030\004 \002(\005"
    "\022\035\n\025phdhdr_hash_file_name\030\005 \002(\t\022\037\n\027phdhd"
    "r_hash_file_digest\030\006 \002(\t\022\033\n\023phdhdr_precu"
    "t_amino\030\007 \002(\t\022\034\n\024phdhdr_postcut_amino\030\010 "
    "\002(\t\022\035\n\025phdhdr_prenocut_amino\030\t \002(\t\022\036\n\026ph"
    "dhdr_postnocut_amino\030\n \002(\t\022\036\n\026phdhdr_mis"
    "sed_cleavage\030\013 \002(\005\022\033\n\023phdhdr_semi_trypti"
    "c\030\014 \002(\005\"l\n\020phd_peptide_mass\022\025\n\rphdpmass_"
    "mass\030\001 \002(\005\022A\n\025phdpmass_peptide_list\030\002 \003("
    "\0132\".peptide_hash_database.phd_peptide\"=\n"
    "\010phd_file\0221\n\006phdhdr\030\001 \002(\0132!.peptide_hash"
    "_database.phd_header", 980);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "protein_pep_hash.proto", &protobuf_RegisterTypes);
  phd_protein::default_instance_ = new phd_protein();
  phd_peptide::default_instance_ = new phd_peptide();
  phd_header::default_instance_ = new phd_header();
  phd_peptide_mass::default_instance_ = new phd_peptide_mass();
  phd_file::default_instance_ = new phd_file();
  phd_protein::default_instance_->InitAsDefaultInstance();
  phd_peptide::default_instance_->InitAsDefaultInstance();
  phd_header::default_instance_->InitAsDefaultInstance();
  phd_peptide_mass::default_instance_->InitAsDefaultInstance();
  phd_file::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_protein_5fpep_5fhash_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_protein_5fpep_5fhash_2eproto {
  StaticDescriptorInitializer_protein_5fpep_5fhash_2eproto() {
    protobuf_AddDesc_protein_5fpep_5fhash_2eproto();
  }
} static_descriptor_initializer_protein_5fpep_5fhash_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int phd_protein::kPhdproNameFieldNumber;
const int phd_protein::kPhdproIdFieldNumber;
const int phd_protein::kPhdproPepseqFieldNumber;
#endif  // !_MSC_VER

phd_protein::phd_protein()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void phd_protein::InitAsDefaultInstance() {
}

phd_protein::phd_protein(const phd_protein& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void phd_protein::SharedCtor() {
  _cached_size_ = 0;
  phdpro_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  phdpro_id_ = 0;
  phdpro_pepseq_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

phd_protein::~phd_protein() {
  SharedDtor();
}

void phd_protein::SharedDtor() {
  if (phdpro_name_ != &::google::protobuf::internal::kEmptyString) {
    delete phdpro_name_;
  }
  if (phdpro_pepseq_ != &::google::protobuf::internal::kEmptyString) {
    delete phdpro_pepseq_;
  }
  if (this != default_instance_) {
  }
}

void phd_protein::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* phd_protein::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return phd_protein_descriptor_;
}

const phd_protein& phd_protein::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protein_5fpep_5fhash_2eproto();
  return *default_instance_;
}

phd_protein* phd_protein::default_instance_ = NULL;

phd_protein* phd_protein::New() const {
  return new phd_protein;
}

void phd_protein::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_phdpro_name()) {
      if (phdpro_name_ != &::google::protobuf::internal::kEmptyString) {
        phdpro_name_->clear();
      }
    }
    phdpro_id_ = 0;
    if (has_phdpro_pepseq()) {
      if (phdpro_pepseq_ != &::google::protobuf::internal::kEmptyString) {
        phdpro_pepseq_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool phd_protein::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string phdpro_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phdpro_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->phdpro_name().data(), this->phdpro_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_phdpro_id;
        break;
      }

      // required int32 phdpro_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_phdpro_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &phdpro_id_)));
          set_has_phdpro_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_phdpro_pepseq;
        break;
      }

      // required string phdpro_pepseq = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_phdpro_pepseq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phdpro_pepseq()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->phdpro_pepseq().data(), this->phdpro_pepseq().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void phd_protein::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string phdpro_name = 1;
  if (has_phdpro_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phdpro_name().data(), this->phdpro_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->phdpro_name(), output);
  }

  // required int32 phdpro_id = 2;
  if (has_phdpro_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->phdpro_id(), output);
  }

  // required string phdpro_pepseq = 3;
  if (has_phdpro_pepseq()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phdpro_pepseq().data(), this->phdpro_pepseq().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->phdpro_pepseq(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* phd_protein::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string phdpro_name = 1;
  if (has_phdpro_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phdpro_name().data(), this->phdpro_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->phdpro_name(), target);
  }

  // required int32 phdpro_id = 2;
  if (has_phdpro_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->phdpro_id(), target);
  }

  // required string phdpro_pepseq = 3;
  if (has_phdpro_pepseq()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phdpro_pepseq().data(), this->phdpro_pepseq().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->phdpro_pepseq(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int phd_protein::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string phdpro_name = 1;
    if (has_phdpro_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phdpro_name());
    }

    // required int32 phdpro_id = 2;
    if (has_phdpro_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->phdpro_id());
    }

    // required string phdpro_pepseq = 3;
    if (has_phdpro_pepseq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phdpro_pepseq());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void phd_protein::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const phd_protein* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const phd_protein*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void phd_protein::MergeFrom(const phd_protein& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phdpro_name()) {
      set_phdpro_name(from.phdpro_name());
    }
    if (from.has_phdpro_id()) {
      set_phdpro_id(from.phdpro_id());
    }
    if (from.has_phdpro_pepseq()) {
      set_phdpro_pepseq(from.phdpro_pepseq());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void phd_protein::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void phd_protein::CopyFrom(const phd_protein& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool phd_protein::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void phd_protein::Swap(phd_protein* other) {
  if (other != this) {
    std::swap(phdpro_name_, other->phdpro_name_);
    std::swap(phdpro_id_, other->phdpro_id_);
    std::swap(phdpro_pepseq_, other->phdpro_pepseq_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata phd_protein::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = phd_protein_descriptor_;
  metadata.reflection = phd_protein_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* phd_peptide_peptide_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return phd_peptide_peptide_type_descriptor_;
}
bool phd_peptide_peptide_type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const phd_peptide_peptide_type phd_peptide::TRYPTIC;
const phd_peptide_peptide_type phd_peptide::TRYPTIC_MISS;
const phd_peptide_peptide_type phd_peptide::TRYPTIC_LEFT;
const phd_peptide_peptide_type phd_peptide::TRYPTIC_RIGHT;
const phd_peptide_peptide_type phd_peptide::TRYPTIC_MLEFT;
const phd_peptide_peptide_type phd_peptide::TRYPTIC_MRIGHT;
const phd_peptide_peptide_type phd_peptide::peptide_type_MIN;
const phd_peptide_peptide_type phd_peptide::peptide_type_MAX;
const int phd_peptide::peptide_type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int phd_peptide::kPhdpepProteinIdFieldNumber;
const int phd_peptide::kPhdpepPepstartFieldNumber;
const int phd_peptide::kPhdpepPeplenFieldNumber;
const int phd_peptide::kPhdpepTypeFieldNumber;
#endif  // !_MSC_VER

phd_peptide::phd_peptide()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void phd_peptide::InitAsDefaultInstance() {
}

phd_peptide::phd_peptide(const phd_peptide& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void phd_peptide::SharedCtor() {
  _cached_size_ = 0;
  phdpep_protein_id_ = 0;
  phdpep_pepstart_ = 0;
  phdpep_peplen_ = 0;
  phdpep_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

phd_peptide::~phd_peptide() {
  SharedDtor();
}

void phd_peptide::SharedDtor() {
  if (this != default_instance_) {
  }
}

void phd_peptide::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* phd_peptide::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return phd_peptide_descriptor_;
}

const phd_peptide& phd_peptide::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protein_5fpep_5fhash_2eproto();
  return *default_instance_;
}

phd_peptide* phd_peptide::default_instance_ = NULL;

phd_peptide* phd_peptide::New() const {
  return new phd_peptide;
}

void phd_peptide::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    phdpep_protein_id_ = 0;
    phdpep_pepstart_ = 0;
    phdpep_peplen_ = 0;
    phdpep_type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool phd_peptide::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 phdpep_protein_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &phdpep_protein_id_)));
          set_has_phdpep_protein_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_phdpep_pepstart;
        break;
      }

      // required int32 phdpep_pepstart = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_phdpep_pepstart:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &phdpep_pepstart_)));
          set_has_phdpep_pepstart();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_phdpep_peplen;
        break;
      }

      // required int32 phdpep_peplen = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_phdpep_peplen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &phdpep_peplen_)));
          set_has_phdpep_peplen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_phdpep_type;
        break;
      }

      // required .peptide_hash_database.phd_peptide.peptide_type phdpep_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_phdpep_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::peptide_hash_database::phd_peptide_peptide_type_IsValid(value)) {
            set_phdpep_type(static_cast< ::peptide_hash_database::phd_peptide_peptide_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void phd_peptide::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 phdpep_protein_id = 1;
  if (has_phdpep_protein_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->phdpep_protein_id(), output);
  }

  // required int32 phdpep_pepstart = 2;
  if (has_phdpep_pepstart()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->phdpep_pepstart(), output);
  }

  // required int32 phdpep_peplen = 3;
  if (has_phdpep_peplen()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->phdpep_peplen(), output);
  }

  // required .peptide_hash_database.phd_peptide.peptide_type phdpep_type = 4;
  if (has_phdpep_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->phdpep_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* phd_peptide::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 phdpep_protein_id = 1;
  if (has_phdpep_protein_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->phdpep_protein_id(), target);
  }

  // required int32 phdpep_pepstart = 2;
  if (has_phdpep_pepstart()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->phdpep_pepstart(), target);
  }

  // required int32 phdpep_peplen = 3;
  if (has_phdpep_peplen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->phdpep_peplen(), target);
  }

  // required .peptide_hash_database.phd_peptide.peptide_type phdpep_type = 4;
  if (has_phdpep_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->phdpep_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int phd_peptide::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 phdpep_protein_id = 1;
    if (has_phdpep_protein_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->phdpep_protein_id());
    }

    // required int32 phdpep_pepstart = 2;
    if (has_phdpep_pepstart()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->phdpep_pepstart());
    }

    // required int32 phdpep_peplen = 3;
    if (has_phdpep_peplen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->phdpep_peplen());
    }

    // required .peptide_hash_database.phd_peptide.peptide_type phdpep_type = 4;
    if (has_phdpep_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->phdpep_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void phd_peptide::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const phd_peptide* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const phd_peptide*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void phd_peptide::MergeFrom(const phd_peptide& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phdpep_protein_id()) {
      set_phdpep_protein_id(from.phdpep_protein_id());
    }
    if (from.has_phdpep_pepstart()) {
      set_phdpep_pepstart(from.phdpep_pepstart());
    }
    if (from.has_phdpep_peplen()) {
      set_phdpep_peplen(from.phdpep_peplen());
    }
    if (from.has_phdpep_type()) {
      set_phdpep_type(from.phdpep_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void phd_peptide::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void phd_peptide::CopyFrom(const phd_peptide& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool phd_peptide::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void phd_peptide::Swap(phd_peptide* other) {
  if (other != this) {
    std::swap(phdpep_protein_id_, other->phdpep_protein_id_);
    std::swap(phdpep_pepstart_, other->phdpep_pepstart_);
    std::swap(phdpep_peplen_, other->phdpep_peplen_);
    std::swap(phdpep_type_, other->phdpep_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata phd_peptide::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = phd_peptide_descriptor_;
  metadata.reflection = phd_peptide_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int phd_header::kPhdhdrVersionFieldNumber;
const int phd_header::kPhdhdrProteinSourceFilenameFieldNumber;
const int phd_header::kPhdhdrProteinSourceFileDigestFieldNumber;
const int phd_header::kPhdhdrNumProteinsFieldNumber;
const int phd_header::kPhdhdrHashFileNameFieldNumber;
const int phd_header::kPhdhdrHashFileDigestFieldNumber;
const int phd_header::kPhdhdrPrecutAminoFieldNumber;
const int phd_header::kPhdhdrPostcutAminoFieldNumber;
const int phd_header::kPhdhdrPrenocutAminoFieldNumber;
const int phd_header::kPhdhdrPostnocutAminoFieldNumber;
const int phd_header::kPhdhdrMissedCleavageFieldNumber;
const int phd_header::kPhdhdrSemiTrypticFieldNumber;
#endif  // !_MSC_VER

phd_header::phd_header()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void phd_header::InitAsDefaultInstance() {
}

phd_header::phd_header(const phd_header& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void phd_header::SharedCtor() {
  _cached_size_ = 0;
  phdhdr_version_ = 0;
  phdhdr_protein_source_filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  phdhdr_protein_source_file_digest_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  phdhdr_num_proteins_ = 0;
  phdhdr_hash_file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  phdhdr_hash_file_digest_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  phdhdr_precut_amino_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  phdhdr_postcut_amino_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  phdhdr_prenocut_amino_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  phdhdr_postnocut_amino_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  phdhdr_missed_cleavage_ = 0;
  phdhdr_semi_tryptic_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

phd_header::~phd_header() {
  SharedDtor();
}

void phd_header::SharedDtor() {
  if (phdhdr_protein_source_filename_ != &::google::protobuf::internal::kEmptyString) {
    delete phdhdr_protein_source_filename_;
  }
  if (phdhdr_protein_source_file_digest_ != &::google::protobuf::internal::kEmptyString) {
    delete phdhdr_protein_source_file_digest_;
  }
  if (phdhdr_hash_file_name_ != &::google::protobuf::internal::kEmptyString) {
    delete phdhdr_hash_file_name_;
  }
  if (phdhdr_hash_file_digest_ != &::google::protobuf::internal::kEmptyString) {
    delete phdhdr_hash_file_digest_;
  }
  if (phdhdr_precut_amino_ != &::google::protobuf::internal::kEmptyString) {
    delete phdhdr_precut_amino_;
  }
  if (phdhdr_postcut_amino_ != &::google::protobuf::internal::kEmptyString) {
    delete phdhdr_postcut_amino_;
  }
  if (phdhdr_prenocut_amino_ != &::google::protobuf::internal::kEmptyString) {
    delete phdhdr_prenocut_amino_;
  }
  if (phdhdr_postnocut_amino_ != &::google::protobuf::internal::kEmptyString) {
    delete phdhdr_postnocut_amino_;
  }
  if (this != default_instance_) {
  }
}

void phd_header::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* phd_header::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return phd_header_descriptor_;
}

const phd_header& phd_header::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protein_5fpep_5fhash_2eproto();
  return *default_instance_;
}

phd_header* phd_header::default_instance_ = NULL;

phd_header* phd_header::New() const {
  return new phd_header;
}

void phd_header::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    phdhdr_version_ = 0;
    if (has_phdhdr_protein_source_filename()) {
      if (phdhdr_protein_source_filename_ != &::google::protobuf::internal::kEmptyString) {
        phdhdr_protein_source_filename_->clear();
      }
    }
    if (has_phdhdr_protein_source_file_digest()) {
      if (phdhdr_protein_source_file_digest_ != &::google::protobuf::internal::kEmptyString) {
        phdhdr_protein_source_file_digest_->clear();
      }
    }
    phdhdr_num_proteins_ = 0;
    if (has_phdhdr_hash_file_name()) {
      if (phdhdr_hash_file_name_ != &::google::protobuf::internal::kEmptyString) {
        phdhdr_hash_file_name_->clear();
      }
    }
    if (has_phdhdr_hash_file_digest()) {
      if (phdhdr_hash_file_digest_ != &::google::protobuf::internal::kEmptyString) {
        phdhdr_hash_file_digest_->clear();
      }
    }
    if (has_phdhdr_precut_amino()) {
      if (phdhdr_precut_amino_ != &::google::protobuf::internal::kEmptyString) {
        phdhdr_precut_amino_->clear();
      }
    }
    if (has_phdhdr_postcut_amino()) {
      if (phdhdr_postcut_amino_ != &::google::protobuf::internal::kEmptyString) {
        phdhdr_postcut_amino_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_phdhdr_prenocut_amino()) {
      if (phdhdr_prenocut_amino_ != &::google::protobuf::internal::kEmptyString) {
        phdhdr_prenocut_amino_->clear();
      }
    }
    if (has_phdhdr_postnocut_amino()) {
      if (phdhdr_postnocut_amino_ != &::google::protobuf::internal::kEmptyString) {
        phdhdr_postnocut_amino_->clear();
      }
    }
    phdhdr_missed_cleavage_ = 0;
    phdhdr_semi_tryptic_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool phd_header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 phdhdr_version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &phdhdr_version_)));
          set_has_phdhdr_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_phdhdr_protein_source_filename;
        break;
      }

      // required string phdhdr_protein_source_filename = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_phdhdr_protein_source_filename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phdhdr_protein_source_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->phdhdr_protein_source_filename().data(), this->phdhdr_protein_source_filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_phdhdr_protein_source_file_digest;
        break;
      }

      // required string phdhdr_protein_source_file_digest = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_phdhdr_protein_source_file_digest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phdhdr_protein_source_file_digest()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->phdhdr_protein_source_file_digest().data(), this->phdhdr_protein_source_file_digest().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_phdhdr_num_proteins;
        break;
      }

      // required int32 phdhdr_num_proteins = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_phdhdr_num_proteins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &phdhdr_num_proteins_)));
          set_has_phdhdr_num_proteins();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_phdhdr_hash_file_name;
        break;
      }

      // required string phdhdr_hash_file_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_phdhdr_hash_file_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phdhdr_hash_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->phdhdr_hash_file_name().data(), this->phdhdr_hash_file_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_phdhdr_hash_file_digest;
        break;
      }

      // required string phdhdr_hash_file_digest = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_phdhdr_hash_file_digest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phdhdr_hash_file_digest()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->phdhdr_hash_file_digest().data(), this->phdhdr_hash_file_digest().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_phdhdr_precut_amino;
        break;
      }

      // required string phdhdr_precut_amino = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_phdhdr_precut_amino:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phdhdr_precut_amino()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->phdhdr_precut_amino().data(), this->phdhdr_precut_amino().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_phdhdr_postcut_amino;
        break;
      }

      // required string phdhdr_postcut_amino = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_phdhdr_postcut_amino:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phdhdr_postcut_amino()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->phdhdr_postcut_amino().data(), this->phdhdr_postcut_amino().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_phdhdr_prenocut_amino;
        break;
      }

      // required string phdhdr_prenocut_amino = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_phdhdr_prenocut_amino:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phdhdr_prenocut_amino()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->phdhdr_prenocut_amino().data(), this->phdhdr_prenocut_amino().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_phdhdr_postnocut_amino;
        break;
      }

      // required string phdhdr_postnocut_amino = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_phdhdr_postnocut_amino:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phdhdr_postnocut_amino()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->phdhdr_postnocut_amino().data(), this->phdhdr_postnocut_amino().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_phdhdr_missed_cleavage;
        break;
      }

      // required int32 phdhdr_missed_cleavage = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_phdhdr_missed_cleavage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &phdhdr_missed_cleavage_)));
          set_has_phdhdr_missed_cleavage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_phdhdr_semi_tryptic;
        break;
      }

      // required int32 phdhdr_semi_tryptic = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_phdhdr_semi_tryptic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &phdhdr_semi_tryptic_)));
          set_has_phdhdr_semi_tryptic();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void phd_header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 phdhdr_version = 1;
  if (has_phdhdr_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->phdhdr_version(), output);
  }

  // required string phdhdr_protein_source_filename = 2;
  if (has_phdhdr_protein_source_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phdhdr_protein_source_filename().data(), this->phdhdr_protein_source_filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->phdhdr_protein_source_filename(), output);
  }

  // required string phdhdr_protein_source_file_digest = 3;
  if (has_phdhdr_protein_source_file_digest()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phdhdr_protein_source_file_digest().data(), this->phdhdr_protein_source_file_digest().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->phdhdr_protein_source_file_digest(), output);
  }

  // required int32 phdhdr_num_proteins = 4;
  if (has_phdhdr_num_proteins()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->phdhdr_num_proteins(), output);
  }

  // required string phdhdr_hash_file_name = 5;
  if (has_phdhdr_hash_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phdhdr_hash_file_name().data(), this->phdhdr_hash_file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->phdhdr_hash_file_name(), output);
  }

  // required string phdhdr_hash_file_digest = 6;
  if (has_phdhdr_hash_file_digest()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phdhdr_hash_file_digest().data(), this->phdhdr_hash_file_digest().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->phdhdr_hash_file_digest(), output);
  }

  // required string phdhdr_precut_amino = 7;
  if (has_phdhdr_precut_amino()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phdhdr_precut_amino().data(), this->phdhdr_precut_amino().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->phdhdr_precut_amino(), output);
  }

  // required string phdhdr_postcut_amino = 8;
  if (has_phdhdr_postcut_amino()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phdhdr_postcut_amino().data(), this->phdhdr_postcut_amino().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->phdhdr_postcut_amino(), output);
  }

  // required string phdhdr_prenocut_amino = 9;
  if (has_phdhdr_prenocut_amino()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phdhdr_prenocut_amino().data(), this->phdhdr_prenocut_amino().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->phdhdr_prenocut_amino(), output);
  }

  // required string phdhdr_postnocut_amino = 10;
  if (has_phdhdr_postnocut_amino()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phdhdr_postnocut_amino().data(), this->phdhdr_postnocut_amino().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->phdhdr_postnocut_amino(), output);
  }

  // required int32 phdhdr_missed_cleavage = 11;
  if (has_phdhdr_missed_cleavage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->phdhdr_missed_cleavage(), output);
  }

  // required int32 phdhdr_semi_tryptic = 12;
  if (has_phdhdr_semi_tryptic()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->phdhdr_semi_tryptic(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* phd_header::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 phdhdr_version = 1;
  if (has_phdhdr_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->phdhdr_version(), target);
  }

  // required string phdhdr_protein_source_filename = 2;
  if (has_phdhdr_protein_source_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phdhdr_protein_source_filename().data(), this->phdhdr_protein_source_filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->phdhdr_protein_source_filename(), target);
  }

  // required string phdhdr_protein_source_file_digest = 3;
  if (has_phdhdr_protein_source_file_digest()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phdhdr_protein_source_file_digest().data(), this->phdhdr_protein_source_file_digest().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->phdhdr_protein_source_file_digest(), target);
  }

  // required int32 phdhdr_num_proteins = 4;
  if (has_phdhdr_num_proteins()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->phdhdr_num_proteins(), target);
  }

  // required string phdhdr_hash_file_name = 5;
  if (has_phdhdr_hash_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phdhdr_hash_file_name().data(), this->phdhdr_hash_file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->phdhdr_hash_file_name(), target);
  }

  // required string phdhdr_hash_file_digest = 6;
  if (has_phdhdr_hash_file_digest()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phdhdr_hash_file_digest().data(), this->phdhdr_hash_file_digest().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->phdhdr_hash_file_digest(), target);
  }

  // required string phdhdr_precut_amino = 7;
  if (has_phdhdr_precut_amino()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phdhdr_precut_amino().data(), this->phdhdr_precut_amino().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->phdhdr_precut_amino(), target);
  }

  // required string phdhdr_postcut_amino = 8;
  if (has_phdhdr_postcut_amino()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phdhdr_postcut_amino().data(), this->phdhdr_postcut_amino().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->phdhdr_postcut_amino(), target);
  }

  // required string phdhdr_prenocut_amino = 9;
  if (has_phdhdr_prenocut_amino()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phdhdr_prenocut_amino().data(), this->phdhdr_prenocut_amino().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->phdhdr_prenocut_amino(), target);
  }

  // required string phdhdr_postnocut_amino = 10;
  if (has_phdhdr_postnocut_amino()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phdhdr_postnocut_amino().data(), this->phdhdr_postnocut_amino().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->phdhdr_postnocut_amino(), target);
  }

  // required int32 phdhdr_missed_cleavage = 11;
  if (has_phdhdr_missed_cleavage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->phdhdr_missed_cleavage(), target);
  }

  // required int32 phdhdr_semi_tryptic = 12;
  if (has_phdhdr_semi_tryptic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->phdhdr_semi_tryptic(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int phd_header::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 phdhdr_version = 1;
    if (has_phdhdr_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->phdhdr_version());
    }

    // required string phdhdr_protein_source_filename = 2;
    if (has_phdhdr_protein_source_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phdhdr_protein_source_filename());
    }

    // required string phdhdr_protein_source_file_digest = 3;
    if (has_phdhdr_protein_source_file_digest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phdhdr_protein_source_file_digest());
    }

    // required int32 phdhdr_num_proteins = 4;
    if (has_phdhdr_num_proteins()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->phdhdr_num_proteins());
    }

    // required string phdhdr_hash_file_name = 5;
    if (has_phdhdr_hash_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phdhdr_hash_file_name());
    }

    // required string phdhdr_hash_file_digest = 6;
    if (has_phdhdr_hash_file_digest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phdhdr_hash_file_digest());
    }

    // required string phdhdr_precut_amino = 7;
    if (has_phdhdr_precut_amino()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phdhdr_precut_amino());
    }

    // required string phdhdr_postcut_amino = 8;
    if (has_phdhdr_postcut_amino()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phdhdr_postcut_amino());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required string phdhdr_prenocut_amino = 9;
    if (has_phdhdr_prenocut_amino()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phdhdr_prenocut_amino());
    }

    // required string phdhdr_postnocut_amino = 10;
    if (has_phdhdr_postnocut_amino()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phdhdr_postnocut_amino());
    }

    // required int32 phdhdr_missed_cleavage = 11;
    if (has_phdhdr_missed_cleavage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->phdhdr_missed_cleavage());
    }

    // required int32 phdhdr_semi_tryptic = 12;
    if (has_phdhdr_semi_tryptic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->phdhdr_semi_tryptic());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void phd_header::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const phd_header* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const phd_header*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void phd_header::MergeFrom(const phd_header& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phdhdr_version()) {
      set_phdhdr_version(from.phdhdr_version());
    }
    if (from.has_phdhdr_protein_source_filename()) {
      set_phdhdr_protein_source_filename(from.phdhdr_protein_source_filename());
    }
    if (from.has_phdhdr_protein_source_file_digest()) {
      set_phdhdr_protein_source_file_digest(from.phdhdr_protein_source_file_digest());
    }
    if (from.has_phdhdr_num_proteins()) {
      set_phdhdr_num_proteins(from.phdhdr_num_proteins());
    }
    if (from.has_phdhdr_hash_file_name()) {
      set_phdhdr_hash_file_name(from.phdhdr_hash_file_name());
    }
    if (from.has_phdhdr_hash_file_digest()) {
      set_phdhdr_hash_file_digest(from.phdhdr_hash_file_digest());
    }
    if (from.has_phdhdr_precut_amino()) {
      set_phdhdr_precut_amino(from.phdhdr_precut_amino());
    }
    if (from.has_phdhdr_postcut_amino()) {
      set_phdhdr_postcut_amino(from.phdhdr_postcut_amino());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_phdhdr_prenocut_amino()) {
      set_phdhdr_prenocut_amino(from.phdhdr_prenocut_amino());
    }
    if (from.has_phdhdr_postnocut_amino()) {
      set_phdhdr_postnocut_amino(from.phdhdr_postnocut_amino());
    }
    if (from.has_phdhdr_missed_cleavage()) {
      set_phdhdr_missed_cleavage(from.phdhdr_missed_cleavage());
    }
    if (from.has_phdhdr_semi_tryptic()) {
      set_phdhdr_semi_tryptic(from.phdhdr_semi_tryptic());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void phd_header::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void phd_header::CopyFrom(const phd_header& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool phd_header::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000fff) != 0x00000fff) return false;

  return true;
}

void phd_header::Swap(phd_header* other) {
  if (other != this) {
    std::swap(phdhdr_version_, other->phdhdr_version_);
    std::swap(phdhdr_protein_source_filename_, other->phdhdr_protein_source_filename_);
    std::swap(phdhdr_protein_source_file_digest_, other->phdhdr_protein_source_file_digest_);
    std::swap(phdhdr_num_proteins_, other->phdhdr_num_proteins_);
    std::swap(phdhdr_hash_file_name_, other->phdhdr_hash_file_name_);
    std::swap(phdhdr_hash_file_digest_, other->phdhdr_hash_file_digest_);
    std::swap(phdhdr_precut_amino_, other->phdhdr_precut_amino_);
    std::swap(phdhdr_postcut_amino_, other->phdhdr_postcut_amino_);
    std::swap(phdhdr_prenocut_amino_, other->phdhdr_prenocut_amino_);
    std::swap(phdhdr_postnocut_amino_, other->phdhdr_postnocut_amino_);
    std::swap(phdhdr_missed_cleavage_, other->phdhdr_missed_cleavage_);
    std::swap(phdhdr_semi_tryptic_, other->phdhdr_semi_tryptic_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata phd_header::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = phd_header_descriptor_;
  metadata.reflection = phd_header_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int phd_peptide_mass::kPhdpmassMassFieldNumber;
const int phd_peptide_mass::kPhdpmassPeptideListFieldNumber;
#endif  // !_MSC_VER

phd_peptide_mass::phd_peptide_mass()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void phd_peptide_mass::InitAsDefaultInstance() {
}

phd_peptide_mass::phd_peptide_mass(const phd_peptide_mass& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void phd_peptide_mass::SharedCtor() {
  _cached_size_ = 0;
  phdpmass_mass_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

phd_peptide_mass::~phd_peptide_mass() {
  SharedDtor();
}

void phd_peptide_mass::SharedDtor() {
  if (this != default_instance_) {
  }
}

void phd_peptide_mass::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* phd_peptide_mass::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return phd_peptide_mass_descriptor_;
}

const phd_peptide_mass& phd_peptide_mass::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protein_5fpep_5fhash_2eproto();
  return *default_instance_;
}

phd_peptide_mass* phd_peptide_mass::default_instance_ = NULL;

phd_peptide_mass* phd_peptide_mass::New() const {
  return new phd_peptide_mass;
}

void phd_peptide_mass::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    phdpmass_mass_ = 0;
  }
  phdpmass_peptide_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool phd_peptide_mass::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 phdpmass_mass = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &phdpmass_mass_)));
          set_has_phdpmass_mass();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_phdpmass_peptide_list;
        break;
      }

      // repeated .peptide_hash_database.phd_peptide phdpmass_peptide_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_phdpmass_peptide_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_phdpmass_peptide_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_phdpmass_peptide_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void phd_peptide_mass::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 phdpmass_mass = 1;
  if (has_phdpmass_mass()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->phdpmass_mass(), output);
  }

  // repeated .peptide_hash_database.phd_peptide phdpmass_peptide_list = 2;
  for (int i = 0; i < this->phdpmass_peptide_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->phdpmass_peptide_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* phd_peptide_mass::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 phdpmass_mass = 1;
  if (has_phdpmass_mass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->phdpmass_mass(), target);
  }

  // repeated .peptide_hash_database.phd_peptide phdpmass_peptide_list = 2;
  for (int i = 0; i < this->phdpmass_peptide_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->phdpmass_peptide_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int phd_peptide_mass::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 phdpmass_mass = 1;
    if (has_phdpmass_mass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->phdpmass_mass());
    }

  }
  // repeated .peptide_hash_database.phd_peptide phdpmass_peptide_list = 2;
  total_size += 1 * this->phdpmass_peptide_list_size();
  for (int i = 0; i < this->phdpmass_peptide_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->phdpmass_peptide_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void phd_peptide_mass::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const phd_peptide_mass* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const phd_peptide_mass*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void phd_peptide_mass::MergeFrom(const phd_peptide_mass& from) {
  GOOGLE_CHECK_NE(&from, this);
  phdpmass_peptide_list_.MergeFrom(from.phdpmass_peptide_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phdpmass_mass()) {
      set_phdpmass_mass(from.phdpmass_mass());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void phd_peptide_mass::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void phd_peptide_mass::CopyFrom(const phd_peptide_mass& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool phd_peptide_mass::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < phdpmass_peptide_list_size(); i++) {
    if (!this->phdpmass_peptide_list(i).IsInitialized()) return false;
  }
  return true;
}

void phd_peptide_mass::Swap(phd_peptide_mass* other) {
  if (other != this) {
    std::swap(phdpmass_mass_, other->phdpmass_mass_);
    phdpmass_peptide_list_.Swap(&other->phdpmass_peptide_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata phd_peptide_mass::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = phd_peptide_mass_descriptor_;
  metadata.reflection = phd_peptide_mass_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int phd_file::kPhdhdrFieldNumber;
#endif  // !_MSC_VER

phd_file::phd_file()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void phd_file::InitAsDefaultInstance() {
  phdhdr_ = const_cast< ::peptide_hash_database::phd_header*>(&::peptide_hash_database::phd_header::default_instance());
}

phd_file::phd_file(const phd_file& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void phd_file::SharedCtor() {
  _cached_size_ = 0;
  phdhdr_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

phd_file::~phd_file() {
  SharedDtor();
}

void phd_file::SharedDtor() {
  if (this != default_instance_) {
    delete phdhdr_;
  }
}

void phd_file::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* phd_file::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return phd_file_descriptor_;
}

const phd_file& phd_file::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protein_5fpep_5fhash_2eproto();
  return *default_instance_;
}

phd_file* phd_file::default_instance_ = NULL;

phd_file* phd_file::New() const {
  return new phd_file;
}

void phd_file::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_phdhdr()) {
      if (phdhdr_ != NULL) phdhdr_->::peptide_hash_database::phd_header::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool phd_file::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .peptide_hash_database.phd_header phdhdr = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_phdhdr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void phd_file::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .peptide_hash_database.phd_header phdhdr = 1;
  if (has_phdhdr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->phdhdr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* phd_file::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .peptide_hash_database.phd_header phdhdr = 1;
  if (has_phdhdr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->phdhdr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int phd_file::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .peptide_hash_database.phd_header phdhdr = 1;
    if (has_phdhdr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->phdhdr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void phd_file::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const phd_file* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const phd_file*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void phd_file::MergeFrom(const phd_file& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phdhdr()) {
      mutable_phdhdr()->::peptide_hash_database::phd_header::MergeFrom(from.phdhdr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void phd_file::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void phd_file::CopyFrom(const phd_file& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool phd_file::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_phdhdr()) {
    if (!this->phdhdr().IsInitialized()) return false;
  }
  return true;
}

void phd_file::Swap(phd_file* other) {
  if (other != this) {
    std::swap(phdhdr_, other->phdhdr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata phd_file::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = phd_file_descriptor_;
  metadata.reflection = phd_file_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace peptide_hash_database

// @@protoc_insertion_point(global_scope)
