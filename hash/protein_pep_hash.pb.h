// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protein_pep_hash.proto

#ifndef PROTOBUF_protein_5fpep_5fhash_2eproto__INCLUDED
#define PROTOBUF_protein_5fpep_5fhash_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace peptide_hash_database {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_protein_5fpep_5fhash_2eproto();
void protobuf_AssignDesc_protein_5fpep_5fhash_2eproto();
void protobuf_ShutdownFile_protein_5fpep_5fhash_2eproto();

class phd_protein;
class phd_peptide;
class phd_header;
class phd_peptide_mass;
class phd_file;

enum phd_peptide_peptide_type {
  phd_peptide_peptide_type_TRYPTIC = 1,
  phd_peptide_peptide_type_TRYPTIC_MISS = 2,
  phd_peptide_peptide_type_TRYPTIC_LEFT = 3,
  phd_peptide_peptide_type_TRYPTIC_RIGHT = 4,
  phd_peptide_peptide_type_TRYPTIC_MLEFT = 5,
  phd_peptide_peptide_type_TRYPTIC_MRIGHT = 6
};
bool phd_peptide_peptide_type_IsValid(int value);
const phd_peptide_peptide_type phd_peptide_peptide_type_peptide_type_MIN = phd_peptide_peptide_type_TRYPTIC;
const phd_peptide_peptide_type phd_peptide_peptide_type_peptide_type_MAX = phd_peptide_peptide_type_TRYPTIC_MRIGHT;
const int phd_peptide_peptide_type_peptide_type_ARRAYSIZE = phd_peptide_peptide_type_peptide_type_MAX + 1;

const ::google::protobuf::EnumDescriptor* phd_peptide_peptide_type_descriptor();
inline const ::std::string& phd_peptide_peptide_type_Name(phd_peptide_peptide_type value) {
  return ::google::protobuf::internal::NameOfEnum(
    phd_peptide_peptide_type_descriptor(), value);
}
inline bool phd_peptide_peptide_type_Parse(
    const ::std::string& name, phd_peptide_peptide_type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<phd_peptide_peptide_type>(
    phd_peptide_peptide_type_descriptor(), name, value);
}
// ===================================================================

class phd_protein : public ::google::protobuf::Message {
 public:
  phd_protein();
  virtual ~phd_protein();

  phd_protein(const phd_protein& from);

  inline phd_protein& operator=(const phd_protein& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const phd_protein& default_instance();

  void Swap(phd_protein* other);

  // implements Message ----------------------------------------------

  phd_protein* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const phd_protein& from);
  void MergeFrom(const phd_protein& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string phdpro_name = 1;
  inline bool has_phdpro_name() const;
  inline void clear_phdpro_name();
  static const int kPhdproNameFieldNumber = 1;
  inline const ::std::string& phdpro_name() const;
  inline void set_phdpro_name(const ::std::string& value);
  inline void set_phdpro_name(const char* value);
  inline void set_phdpro_name(const char* value, size_t size);
  inline ::std::string* mutable_phdpro_name();
  inline ::std::string* release_phdpro_name();
  inline void set_allocated_phdpro_name(::std::string* phdpro_name);

  // required int32 phdpro_id = 2;
  inline bool has_phdpro_id() const;
  inline void clear_phdpro_id();
  static const int kPhdproIdFieldNumber = 2;
  inline ::google::protobuf::int32 phdpro_id() const;
  inline void set_phdpro_id(::google::protobuf::int32 value);

  // required string phdpro_pepseq = 3;
  inline bool has_phdpro_pepseq() const;
  inline void clear_phdpro_pepseq();
  static const int kPhdproPepseqFieldNumber = 3;
  inline const ::std::string& phdpro_pepseq() const;
  inline void set_phdpro_pepseq(const ::std::string& value);
  inline void set_phdpro_pepseq(const char* value);
  inline void set_phdpro_pepseq(const char* value, size_t size);
  inline ::std::string* mutable_phdpro_pepseq();
  inline ::std::string* release_phdpro_pepseq();
  inline void set_allocated_phdpro_pepseq(::std::string* phdpro_pepseq);

  // @@protoc_insertion_point(class_scope:peptide_hash_database.phd_protein)
 private:
  inline void set_has_phdpro_name();
  inline void clear_has_phdpro_name();
  inline void set_has_phdpro_id();
  inline void clear_has_phdpro_id();
  inline void set_has_phdpro_pepseq();
  inline void clear_has_phdpro_pepseq();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* phdpro_name_;
  ::std::string* phdpro_pepseq_;
  ::google::protobuf::int32 phdpro_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_protein_5fpep_5fhash_2eproto();
  friend void protobuf_AssignDesc_protein_5fpep_5fhash_2eproto();
  friend void protobuf_ShutdownFile_protein_5fpep_5fhash_2eproto();

  void InitAsDefaultInstance();
  static phd_protein* default_instance_;
};
// -------------------------------------------------------------------

class phd_peptide : public ::google::protobuf::Message {
 public:
  phd_peptide();
  virtual ~phd_peptide();

  phd_peptide(const phd_peptide& from);

  inline phd_peptide& operator=(const phd_peptide& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const phd_peptide& default_instance();

  void Swap(phd_peptide* other);

  // implements Message ----------------------------------------------

  phd_peptide* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const phd_peptide& from);
  void MergeFrom(const phd_peptide& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef phd_peptide_peptide_type peptide_type;
  static const peptide_type TRYPTIC = phd_peptide_peptide_type_TRYPTIC;
  static const peptide_type TRYPTIC_MISS = phd_peptide_peptide_type_TRYPTIC_MISS;
  static const peptide_type TRYPTIC_LEFT = phd_peptide_peptide_type_TRYPTIC_LEFT;
  static const peptide_type TRYPTIC_RIGHT = phd_peptide_peptide_type_TRYPTIC_RIGHT;
  static const peptide_type TRYPTIC_MLEFT = phd_peptide_peptide_type_TRYPTIC_MLEFT;
  static const peptide_type TRYPTIC_MRIGHT = phd_peptide_peptide_type_TRYPTIC_MRIGHT;
  static inline bool peptide_type_IsValid(int value) {
    return phd_peptide_peptide_type_IsValid(value);
  }
  static const peptide_type peptide_type_MIN =
    phd_peptide_peptide_type_peptide_type_MIN;
  static const peptide_type peptide_type_MAX =
    phd_peptide_peptide_type_peptide_type_MAX;
  static const int peptide_type_ARRAYSIZE =
    phd_peptide_peptide_type_peptide_type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  peptide_type_descriptor() {
    return phd_peptide_peptide_type_descriptor();
  }
  static inline const ::std::string& peptide_type_Name(peptide_type value) {
    return phd_peptide_peptide_type_Name(value);
  }
  static inline bool peptide_type_Parse(const ::std::string& name,
      peptide_type* value) {
    return phd_peptide_peptide_type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int32 phdpep_protein_id = 1;
  inline bool has_phdpep_protein_id() const;
  inline void clear_phdpep_protein_id();
  static const int kPhdpepProteinIdFieldNumber = 1;
  inline ::google::protobuf::int32 phdpep_protein_id() const;
  inline void set_phdpep_protein_id(::google::protobuf::int32 value);

  // required int32 phdpep_pepstart = 2;
  inline bool has_phdpep_pepstart() const;
  inline void clear_phdpep_pepstart();
  static const int kPhdpepPepstartFieldNumber = 2;
  inline ::google::protobuf::int32 phdpep_pepstart() const;
  inline void set_phdpep_pepstart(::google::protobuf::int32 value);

  // required int32 phdpep_peplen = 3;
  inline bool has_phdpep_peplen() const;
  inline void clear_phdpep_peplen();
  static const int kPhdpepPeplenFieldNumber = 3;
  inline ::google::protobuf::int32 phdpep_peplen() const;
  inline void set_phdpep_peplen(::google::protobuf::int32 value);

  // required .peptide_hash_database.phd_peptide.peptide_type phdpep_type = 4;
  inline bool has_phdpep_type() const;
  inline void clear_phdpep_type();
  static const int kPhdpepTypeFieldNumber = 4;
  inline ::peptide_hash_database::phd_peptide_peptide_type phdpep_type() const;
  inline void set_phdpep_type(::peptide_hash_database::phd_peptide_peptide_type value);

  // @@protoc_insertion_point(class_scope:peptide_hash_database.phd_peptide)
 private:
  inline void set_has_phdpep_protein_id();
  inline void clear_has_phdpep_protein_id();
  inline void set_has_phdpep_pepstart();
  inline void clear_has_phdpep_pepstart();
  inline void set_has_phdpep_peplen();
  inline void clear_has_phdpep_peplen();
  inline void set_has_phdpep_type();
  inline void clear_has_phdpep_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 phdpep_protein_id_;
  ::google::protobuf::int32 phdpep_pepstart_;
  ::google::protobuf::int32 phdpep_peplen_;
  int phdpep_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_protein_5fpep_5fhash_2eproto();
  friend void protobuf_AssignDesc_protein_5fpep_5fhash_2eproto();
  friend void protobuf_ShutdownFile_protein_5fpep_5fhash_2eproto();

  void InitAsDefaultInstance();
  static phd_peptide* default_instance_;
};
// -------------------------------------------------------------------

class phd_header : public ::google::protobuf::Message {
 public:
  phd_header();
  virtual ~phd_header();

  phd_header(const phd_header& from);

  inline phd_header& operator=(const phd_header& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const phd_header& default_instance();

  void Swap(phd_header* other);

  // implements Message ----------------------------------------------

  phd_header* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const phd_header& from);
  void MergeFrom(const phd_header& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 phdhdr_version = 1;
  inline bool has_phdhdr_version() const;
  inline void clear_phdhdr_version();
  static const int kPhdhdrVersionFieldNumber = 1;
  inline ::google::protobuf::int32 phdhdr_version() const;
  inline void set_phdhdr_version(::google::protobuf::int32 value);

  // required string phdhdr_protein_source_filename = 2;
  inline bool has_phdhdr_protein_source_filename() const;
  inline void clear_phdhdr_protein_source_filename();
  static const int kPhdhdrProteinSourceFilenameFieldNumber = 2;
  inline const ::std::string& phdhdr_protein_source_filename() const;
  inline void set_phdhdr_protein_source_filename(const ::std::string& value);
  inline void set_phdhdr_protein_source_filename(const char* value);
  inline void set_phdhdr_protein_source_filename(const char* value, size_t size);
  inline ::std::string* mutable_phdhdr_protein_source_filename();
  inline ::std::string* release_phdhdr_protein_source_filename();
  inline void set_allocated_phdhdr_protein_source_filename(::std::string* phdhdr_protein_source_filename);

  // required string phdhdr_protein_source_file_digest = 3;
  inline bool has_phdhdr_protein_source_file_digest() const;
  inline void clear_phdhdr_protein_source_file_digest();
  static const int kPhdhdrProteinSourceFileDigestFieldNumber = 3;
  inline const ::std::string& phdhdr_protein_source_file_digest() const;
  inline void set_phdhdr_protein_source_file_digest(const ::std::string& value);
  inline void set_phdhdr_protein_source_file_digest(const char* value);
  inline void set_phdhdr_protein_source_file_digest(const char* value, size_t size);
  inline ::std::string* mutable_phdhdr_protein_source_file_digest();
  inline ::std::string* release_phdhdr_protein_source_file_digest();
  inline void set_allocated_phdhdr_protein_source_file_digest(::std::string* phdhdr_protein_source_file_digest);

  // required int32 phdhdr_num_proteins = 4;
  inline bool has_phdhdr_num_proteins() const;
  inline void clear_phdhdr_num_proteins();
  static const int kPhdhdrNumProteinsFieldNumber = 4;
  inline ::google::protobuf::int32 phdhdr_num_proteins() const;
  inline void set_phdhdr_num_proteins(::google::protobuf::int32 value);

  // required string phdhdr_hash_file_name = 5;
  inline bool has_phdhdr_hash_file_name() const;
  inline void clear_phdhdr_hash_file_name();
  static const int kPhdhdrHashFileNameFieldNumber = 5;
  inline const ::std::string& phdhdr_hash_file_name() const;
  inline void set_phdhdr_hash_file_name(const ::std::string& value);
  inline void set_phdhdr_hash_file_name(const char* value);
  inline void set_phdhdr_hash_file_name(const char* value, size_t size);
  inline ::std::string* mutable_phdhdr_hash_file_name();
  inline ::std::string* release_phdhdr_hash_file_name();
  inline void set_allocated_phdhdr_hash_file_name(::std::string* phdhdr_hash_file_name);

  // required string phdhdr_hash_file_digest = 6;
  inline bool has_phdhdr_hash_file_digest() const;
  inline void clear_phdhdr_hash_file_digest();
  static const int kPhdhdrHashFileDigestFieldNumber = 6;
  inline const ::std::string& phdhdr_hash_file_digest() const;
  inline void set_phdhdr_hash_file_digest(const ::std::string& value);
  inline void set_phdhdr_hash_file_digest(const char* value);
  inline void set_phdhdr_hash_file_digest(const char* value, size_t size);
  inline ::std::string* mutable_phdhdr_hash_file_digest();
  inline ::std::string* release_phdhdr_hash_file_digest();
  inline void set_allocated_phdhdr_hash_file_digest(::std::string* phdhdr_hash_file_digest);

  // required string phdhdr_precut_amino = 7;
  inline bool has_phdhdr_precut_amino() const;
  inline void clear_phdhdr_precut_amino();
  static const int kPhdhdrPrecutAminoFieldNumber = 7;
  inline const ::std::string& phdhdr_precut_amino() const;
  inline void set_phdhdr_precut_amino(const ::std::string& value);
  inline void set_phdhdr_precut_amino(const char* value);
  inline void set_phdhdr_precut_amino(const char* value, size_t size);
  inline ::std::string* mutable_phdhdr_precut_amino();
  inline ::std::string* release_phdhdr_precut_amino();
  inline void set_allocated_phdhdr_precut_amino(::std::string* phdhdr_precut_amino);

  // required string phdhdr_postcut_amino = 8;
  inline bool has_phdhdr_postcut_amino() const;
  inline void clear_phdhdr_postcut_amino();
  static const int kPhdhdrPostcutAminoFieldNumber = 8;
  inline const ::std::string& phdhdr_postcut_amino() const;
  inline void set_phdhdr_postcut_amino(const ::std::string& value);
  inline void set_phdhdr_postcut_amino(const char* value);
  inline void set_phdhdr_postcut_amino(const char* value, size_t size);
  inline ::std::string* mutable_phdhdr_postcut_amino();
  inline ::std::string* release_phdhdr_postcut_amino();
  inline void set_allocated_phdhdr_postcut_amino(::std::string* phdhdr_postcut_amino);

  // required string phdhdr_prenocut_amino = 9;
  inline bool has_phdhdr_prenocut_amino() const;
  inline void clear_phdhdr_prenocut_amino();
  static const int kPhdhdrPrenocutAminoFieldNumber = 9;
  inline const ::std::string& phdhdr_prenocut_amino() const;
  inline void set_phdhdr_prenocut_amino(const ::std::string& value);
  inline void set_phdhdr_prenocut_amino(const char* value);
  inline void set_phdhdr_prenocut_amino(const char* value, size_t size);
  inline ::std::string* mutable_phdhdr_prenocut_amino();
  inline ::std::string* release_phdhdr_prenocut_amino();
  inline void set_allocated_phdhdr_prenocut_amino(::std::string* phdhdr_prenocut_amino);

  // required string phdhdr_postnocut_amino = 10;
  inline bool has_phdhdr_postnocut_amino() const;
  inline void clear_phdhdr_postnocut_amino();
  static const int kPhdhdrPostnocutAminoFieldNumber = 10;
  inline const ::std::string& phdhdr_postnocut_amino() const;
  inline void set_phdhdr_postnocut_amino(const ::std::string& value);
  inline void set_phdhdr_postnocut_amino(const char* value);
  inline void set_phdhdr_postnocut_amino(const char* value, size_t size);
  inline ::std::string* mutable_phdhdr_postnocut_amino();
  inline ::std::string* release_phdhdr_postnocut_amino();
  inline void set_allocated_phdhdr_postnocut_amino(::std::string* phdhdr_postnocut_amino);

  // required int32 phdhdr_missed_cleavage = 11;
  inline bool has_phdhdr_missed_cleavage() const;
  inline void clear_phdhdr_missed_cleavage();
  static const int kPhdhdrMissedCleavageFieldNumber = 11;
  inline ::google::protobuf::int32 phdhdr_missed_cleavage() const;
  inline void set_phdhdr_missed_cleavage(::google::protobuf::int32 value);

  // required int32 phdhdr_semi_tryptic = 12;
  inline bool has_phdhdr_semi_tryptic() const;
  inline void clear_phdhdr_semi_tryptic();
  static const int kPhdhdrSemiTrypticFieldNumber = 12;
  inline ::google::protobuf::int32 phdhdr_semi_tryptic() const;
  inline void set_phdhdr_semi_tryptic(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:peptide_hash_database.phd_header)
 private:
  inline void set_has_phdhdr_version();
  inline void clear_has_phdhdr_version();
  inline void set_has_phdhdr_protein_source_filename();
  inline void clear_has_phdhdr_protein_source_filename();
  inline void set_has_phdhdr_protein_source_file_digest();
  inline void clear_has_phdhdr_protein_source_file_digest();
  inline void set_has_phdhdr_num_proteins();
  inline void clear_has_phdhdr_num_proteins();
  inline void set_has_phdhdr_hash_file_name();
  inline void clear_has_phdhdr_hash_file_name();
  inline void set_has_phdhdr_hash_file_digest();
  inline void clear_has_phdhdr_hash_file_digest();
  inline void set_has_phdhdr_precut_amino();
  inline void clear_has_phdhdr_precut_amino();
  inline void set_has_phdhdr_postcut_amino();
  inline void clear_has_phdhdr_postcut_amino();
  inline void set_has_phdhdr_prenocut_amino();
  inline void clear_has_phdhdr_prenocut_amino();
  inline void set_has_phdhdr_postnocut_amino();
  inline void clear_has_phdhdr_postnocut_amino();
  inline void set_has_phdhdr_missed_cleavage();
  inline void clear_has_phdhdr_missed_cleavage();
  inline void set_has_phdhdr_semi_tryptic();
  inline void clear_has_phdhdr_semi_tryptic();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* phdhdr_protein_source_filename_;
  ::google::protobuf::int32 phdhdr_version_;
  ::google::protobuf::int32 phdhdr_num_proteins_;
  ::std::string* phdhdr_protein_source_file_digest_;
  ::std::string* phdhdr_hash_file_name_;
  ::std::string* phdhdr_hash_file_digest_;
  ::std::string* phdhdr_precut_amino_;
  ::std::string* phdhdr_postcut_amino_;
  ::std::string* phdhdr_prenocut_amino_;
  ::std::string* phdhdr_postnocut_amino_;
  ::google::protobuf::int32 phdhdr_missed_cleavage_;
  ::google::protobuf::int32 phdhdr_semi_tryptic_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_protein_5fpep_5fhash_2eproto();
  friend void protobuf_AssignDesc_protein_5fpep_5fhash_2eproto();
  friend void protobuf_ShutdownFile_protein_5fpep_5fhash_2eproto();

  void InitAsDefaultInstance();
  static phd_header* default_instance_;
};
// -------------------------------------------------------------------

class phd_peptide_mass : public ::google::protobuf::Message {
 public:
  phd_peptide_mass();
  virtual ~phd_peptide_mass();

  phd_peptide_mass(const phd_peptide_mass& from);

  inline phd_peptide_mass& operator=(const phd_peptide_mass& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const phd_peptide_mass& default_instance();

  void Swap(phd_peptide_mass* other);

  // implements Message ----------------------------------------------

  phd_peptide_mass* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const phd_peptide_mass& from);
  void MergeFrom(const phd_peptide_mass& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 phdpmass_mass = 1;
  inline bool has_phdpmass_mass() const;
  inline void clear_phdpmass_mass();
  static const int kPhdpmassMassFieldNumber = 1;
  inline ::google::protobuf::int32 phdpmass_mass() const;
  inline void set_phdpmass_mass(::google::protobuf::int32 value);

  // repeated .peptide_hash_database.phd_peptide phdpmass_peptide_list = 2;
  inline int phdpmass_peptide_list_size() const;
  inline void clear_phdpmass_peptide_list();
  static const int kPhdpmassPeptideListFieldNumber = 2;
  inline const ::peptide_hash_database::phd_peptide& phdpmass_peptide_list(int index) const;
  inline ::peptide_hash_database::phd_peptide* mutable_phdpmass_peptide_list(int index);
  inline ::peptide_hash_database::phd_peptide* add_phdpmass_peptide_list();
  inline const ::google::protobuf::RepeatedPtrField< ::peptide_hash_database::phd_peptide >&
      phdpmass_peptide_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::peptide_hash_database::phd_peptide >*
      mutable_phdpmass_peptide_list();

  // @@protoc_insertion_point(class_scope:peptide_hash_database.phd_peptide_mass)
 private:
  inline void set_has_phdpmass_mass();
  inline void clear_has_phdpmass_mass();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::peptide_hash_database::phd_peptide > phdpmass_peptide_list_;
  ::google::protobuf::int32 phdpmass_mass_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_protein_5fpep_5fhash_2eproto();
  friend void protobuf_AssignDesc_protein_5fpep_5fhash_2eproto();
  friend void protobuf_ShutdownFile_protein_5fpep_5fhash_2eproto();

  void InitAsDefaultInstance();
  static phd_peptide_mass* default_instance_;
};
// -------------------------------------------------------------------

class phd_file : public ::google::protobuf::Message {
 public:
  phd_file();
  virtual ~phd_file();

  phd_file(const phd_file& from);

  inline phd_file& operator=(const phd_file& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const phd_file& default_instance();

  void Swap(phd_file* other);

  // implements Message ----------------------------------------------

  phd_file* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const phd_file& from);
  void MergeFrom(const phd_file& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .peptide_hash_database.phd_header phdhdr = 1;
  inline bool has_phdhdr() const;
  inline void clear_phdhdr();
  static const int kPhdhdrFieldNumber = 1;
  inline const ::peptide_hash_database::phd_header& phdhdr() const;
  inline ::peptide_hash_database::phd_header* mutable_phdhdr();
  inline ::peptide_hash_database::phd_header* release_phdhdr();
  inline void set_allocated_phdhdr(::peptide_hash_database::phd_header* phdhdr);

  // @@protoc_insertion_point(class_scope:peptide_hash_database.phd_file)
 private:
  inline void set_has_phdhdr();
  inline void clear_has_phdhdr();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::peptide_hash_database::phd_header* phdhdr_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_protein_5fpep_5fhash_2eproto();
  friend void protobuf_AssignDesc_protein_5fpep_5fhash_2eproto();
  friend void protobuf_ShutdownFile_protein_5fpep_5fhash_2eproto();

  void InitAsDefaultInstance();
  static phd_file* default_instance_;
};
// ===================================================================


// ===================================================================

// phd_protein

// required string phdpro_name = 1;
inline bool phd_protein::has_phdpro_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void phd_protein::set_has_phdpro_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void phd_protein::clear_has_phdpro_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void phd_protein::clear_phdpro_name() {
  if (phdpro_name_ != &::google::protobuf::internal::kEmptyString) {
    phdpro_name_->clear();
  }
  clear_has_phdpro_name();
}
inline const ::std::string& phd_protein::phdpro_name() const {
  return *phdpro_name_;
}
inline void phd_protein::set_phdpro_name(const ::std::string& value) {
  set_has_phdpro_name();
  if (phdpro_name_ == &::google::protobuf::internal::kEmptyString) {
    phdpro_name_ = new ::std::string;
  }
  phdpro_name_->assign(value);
}
inline void phd_protein::set_phdpro_name(const char* value) {
  set_has_phdpro_name();
  if (phdpro_name_ == &::google::protobuf::internal::kEmptyString) {
    phdpro_name_ = new ::std::string;
  }
  phdpro_name_->assign(value);
}
inline void phd_protein::set_phdpro_name(const char* value, size_t size) {
  set_has_phdpro_name();
  if (phdpro_name_ == &::google::protobuf::internal::kEmptyString) {
    phdpro_name_ = new ::std::string;
  }
  phdpro_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* phd_protein::mutable_phdpro_name() {
  set_has_phdpro_name();
  if (phdpro_name_ == &::google::protobuf::internal::kEmptyString) {
    phdpro_name_ = new ::std::string;
  }
  return phdpro_name_;
}
inline ::std::string* phd_protein::release_phdpro_name() {
  clear_has_phdpro_name();
  if (phdpro_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = phdpro_name_;
    phdpro_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void phd_protein::set_allocated_phdpro_name(::std::string* phdpro_name) {
  if (phdpro_name_ != &::google::protobuf::internal::kEmptyString) {
    delete phdpro_name_;
  }
  if (phdpro_name) {
    set_has_phdpro_name();
    phdpro_name_ = phdpro_name;
  } else {
    clear_has_phdpro_name();
    phdpro_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 phdpro_id = 2;
inline bool phd_protein::has_phdpro_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void phd_protein::set_has_phdpro_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void phd_protein::clear_has_phdpro_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void phd_protein::clear_phdpro_id() {
  phdpro_id_ = 0;
  clear_has_phdpro_id();
}
inline ::google::protobuf::int32 phd_protein::phdpro_id() const {
  return phdpro_id_;
}
inline void phd_protein::set_phdpro_id(::google::protobuf::int32 value) {
  set_has_phdpro_id();
  phdpro_id_ = value;
}

// required string phdpro_pepseq = 3;
inline bool phd_protein::has_phdpro_pepseq() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void phd_protein::set_has_phdpro_pepseq() {
  _has_bits_[0] |= 0x00000004u;
}
inline void phd_protein::clear_has_phdpro_pepseq() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void phd_protein::clear_phdpro_pepseq() {
  if (phdpro_pepseq_ != &::google::protobuf::internal::kEmptyString) {
    phdpro_pepseq_->clear();
  }
  clear_has_phdpro_pepseq();
}
inline const ::std::string& phd_protein::phdpro_pepseq() const {
  return *phdpro_pepseq_;
}
inline void phd_protein::set_phdpro_pepseq(const ::std::string& value) {
  set_has_phdpro_pepseq();
  if (phdpro_pepseq_ == &::google::protobuf::internal::kEmptyString) {
    phdpro_pepseq_ = new ::std::string;
  }
  phdpro_pepseq_->assign(value);
}
inline void phd_protein::set_phdpro_pepseq(const char* value) {
  set_has_phdpro_pepseq();
  if (phdpro_pepseq_ == &::google::protobuf::internal::kEmptyString) {
    phdpro_pepseq_ = new ::std::string;
  }
  phdpro_pepseq_->assign(value);
}
inline void phd_protein::set_phdpro_pepseq(const char* value, size_t size) {
  set_has_phdpro_pepseq();
  if (phdpro_pepseq_ == &::google::protobuf::internal::kEmptyString) {
    phdpro_pepseq_ = new ::std::string;
  }
  phdpro_pepseq_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* phd_protein::mutable_phdpro_pepseq() {
  set_has_phdpro_pepseq();
  if (phdpro_pepseq_ == &::google::protobuf::internal::kEmptyString) {
    phdpro_pepseq_ = new ::std::string;
  }
  return phdpro_pepseq_;
}
inline ::std::string* phd_protein::release_phdpro_pepseq() {
  clear_has_phdpro_pepseq();
  if (phdpro_pepseq_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = phdpro_pepseq_;
    phdpro_pepseq_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void phd_protein::set_allocated_phdpro_pepseq(::std::string* phdpro_pepseq) {
  if (phdpro_pepseq_ != &::google::protobuf::internal::kEmptyString) {
    delete phdpro_pepseq_;
  }
  if (phdpro_pepseq) {
    set_has_phdpro_pepseq();
    phdpro_pepseq_ = phdpro_pepseq;
  } else {
    clear_has_phdpro_pepseq();
    phdpro_pepseq_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// phd_peptide

// required int32 phdpep_protein_id = 1;
inline bool phd_peptide::has_phdpep_protein_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void phd_peptide::set_has_phdpep_protein_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void phd_peptide::clear_has_phdpep_protein_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void phd_peptide::clear_phdpep_protein_id() {
  phdpep_protein_id_ = 0;
  clear_has_phdpep_protein_id();
}
inline ::google::protobuf::int32 phd_peptide::phdpep_protein_id() const {
  return phdpep_protein_id_;
}
inline void phd_peptide::set_phdpep_protein_id(::google::protobuf::int32 value) {
  set_has_phdpep_protein_id();
  phdpep_protein_id_ = value;
}

// required int32 phdpep_pepstart = 2;
inline bool phd_peptide::has_phdpep_pepstart() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void phd_peptide::set_has_phdpep_pepstart() {
  _has_bits_[0] |= 0x00000002u;
}
inline void phd_peptide::clear_has_phdpep_pepstart() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void phd_peptide::clear_phdpep_pepstart() {
  phdpep_pepstart_ = 0;
  clear_has_phdpep_pepstart();
}
inline ::google::protobuf::int32 phd_peptide::phdpep_pepstart() const {
  return phdpep_pepstart_;
}
inline void phd_peptide::set_phdpep_pepstart(::google::protobuf::int32 value) {
  set_has_phdpep_pepstart();
  phdpep_pepstart_ = value;
}

// required int32 phdpep_peplen = 3;
inline bool phd_peptide::has_phdpep_peplen() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void phd_peptide::set_has_phdpep_peplen() {
  _has_bits_[0] |= 0x00000004u;
}
inline void phd_peptide::clear_has_phdpep_peplen() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void phd_peptide::clear_phdpep_peplen() {
  phdpep_peplen_ = 0;
  clear_has_phdpep_peplen();
}
inline ::google::protobuf::int32 phd_peptide::phdpep_peplen() const {
  return phdpep_peplen_;
}
inline void phd_peptide::set_phdpep_peplen(::google::protobuf::int32 value) {
  set_has_phdpep_peplen();
  phdpep_peplen_ = value;
}

// required .peptide_hash_database.phd_peptide.peptide_type phdpep_type = 4;
inline bool phd_peptide::has_phdpep_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void phd_peptide::set_has_phdpep_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void phd_peptide::clear_has_phdpep_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void phd_peptide::clear_phdpep_type() {
  phdpep_type_ = 1;
  clear_has_phdpep_type();
}
inline ::peptide_hash_database::phd_peptide_peptide_type phd_peptide::phdpep_type() const {
  return static_cast< ::peptide_hash_database::phd_peptide_peptide_type >(phdpep_type_);
}
inline void phd_peptide::set_phdpep_type(::peptide_hash_database::phd_peptide_peptide_type value) {
  assert(::peptide_hash_database::phd_peptide_peptide_type_IsValid(value));
  set_has_phdpep_type();
  phdpep_type_ = value;
}

// -------------------------------------------------------------------

// phd_header

// required int32 phdhdr_version = 1;
inline bool phd_header::has_phdhdr_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void phd_header::set_has_phdhdr_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void phd_header::clear_has_phdhdr_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void phd_header::clear_phdhdr_version() {
  phdhdr_version_ = 0;
  clear_has_phdhdr_version();
}
inline ::google::protobuf::int32 phd_header::phdhdr_version() const {
  return phdhdr_version_;
}
inline void phd_header::set_phdhdr_version(::google::protobuf::int32 value) {
  set_has_phdhdr_version();
  phdhdr_version_ = value;
}

// required string phdhdr_protein_source_filename = 2;
inline bool phd_header::has_phdhdr_protein_source_filename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void phd_header::set_has_phdhdr_protein_source_filename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void phd_header::clear_has_phdhdr_protein_source_filename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void phd_header::clear_phdhdr_protein_source_filename() {
  if (phdhdr_protein_source_filename_ != &::google::protobuf::internal::kEmptyString) {
    phdhdr_protein_source_filename_->clear();
  }
  clear_has_phdhdr_protein_source_filename();
}
inline const ::std::string& phd_header::phdhdr_protein_source_filename() const {
  return *phdhdr_protein_source_filename_;
}
inline void phd_header::set_phdhdr_protein_source_filename(const ::std::string& value) {
  set_has_phdhdr_protein_source_filename();
  if (phdhdr_protein_source_filename_ == &::google::protobuf::internal::kEmptyString) {
    phdhdr_protein_source_filename_ = new ::std::string;
  }
  phdhdr_protein_source_filename_->assign(value);
}
inline void phd_header::set_phdhdr_protein_source_filename(const char* value) {
  set_has_phdhdr_protein_source_filename();
  if (phdhdr_protein_source_filename_ == &::google::protobuf::internal::kEmptyString) {
    phdhdr_protein_source_filename_ = new ::std::string;
  }
  phdhdr_protein_source_filename_->assign(value);
}
inline void phd_header::set_phdhdr_protein_source_filename(const char* value, size_t size) {
  set_has_phdhdr_protein_source_filename();
  if (phdhdr_protein_source_filename_ == &::google::protobuf::internal::kEmptyString) {
    phdhdr_protein_source_filename_ = new ::std::string;
  }
  phdhdr_protein_source_filename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* phd_header::mutable_phdhdr_protein_source_filename() {
  set_has_phdhdr_protein_source_filename();
  if (phdhdr_protein_source_filename_ == &::google::protobuf::internal::kEmptyString) {
    phdhdr_protein_source_filename_ = new ::std::string;
  }
  return phdhdr_protein_source_filename_;
}
inline ::std::string* phd_header::release_phdhdr_protein_source_filename() {
  clear_has_phdhdr_protein_source_filename();
  if (phdhdr_protein_source_filename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = phdhdr_protein_source_filename_;
    phdhdr_protein_source_filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void phd_header::set_allocated_phdhdr_protein_source_filename(::std::string* phdhdr_protein_source_filename) {
  if (phdhdr_protein_source_filename_ != &::google::protobuf::internal::kEmptyString) {
    delete phdhdr_protein_source_filename_;
  }
  if (phdhdr_protein_source_filename) {
    set_has_phdhdr_protein_source_filename();
    phdhdr_protein_source_filename_ = phdhdr_protein_source_filename;
  } else {
    clear_has_phdhdr_protein_source_filename();
    phdhdr_protein_source_filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string phdhdr_protein_source_file_digest = 3;
inline bool phd_header::has_phdhdr_protein_source_file_digest() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void phd_header::set_has_phdhdr_protein_source_file_digest() {
  _has_bits_[0] |= 0x00000004u;
}
inline void phd_header::clear_has_phdhdr_protein_source_file_digest() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void phd_header::clear_phdhdr_protein_source_file_digest() {
  if (phdhdr_protein_source_file_digest_ != &::google::protobuf::internal::kEmptyString) {
    phdhdr_protein_source_file_digest_->clear();
  }
  clear_has_phdhdr_protein_source_file_digest();
}
inline const ::std::string& phd_header::phdhdr_protein_source_file_digest() const {
  return *phdhdr_protein_source_file_digest_;
}
inline void phd_header::set_phdhdr_protein_source_file_digest(const ::std::string& value) {
  set_has_phdhdr_protein_source_file_digest();
  if (phdhdr_protein_source_file_digest_ == &::google::protobuf::internal::kEmptyString) {
    phdhdr_protein_source_file_digest_ = new ::std::string;
  }
  phdhdr_protein_source_file_digest_->assign(value);
}
inline void phd_header::set_phdhdr_protein_source_file_digest(const char* value) {
  set_has_phdhdr_protein_source_file_digest();
  if (phdhdr_protein_source_file_digest_ == &::google::protobuf::internal::kEmptyString) {
    phdhdr_protein_source_file_digest_ = new ::std::string;
  }
  phdhdr_protein_source_file_digest_->assign(value);
}
inline void phd_header::set_phdhdr_protein_source_file_digest(const char* value, size_t size) {
  set_has_phdhdr_protein_source_file_digest();
  if (phdhdr_protein_source_file_digest_ == &::google::protobuf::internal::kEmptyString) {
    phdhdr_protein_source_file_digest_ = new ::std::string;
  }
  phdhdr_protein_source_file_digest_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* phd_header::mutable_phdhdr_protein_source_file_digest() {
  set_has_phdhdr_protein_source_file_digest();
  if (phdhdr_protein_source_file_digest_ == &::google::protobuf::internal::kEmptyString) {
    phdhdr_protein_source_file_digest_ = new ::std::string;
  }
  return phdhdr_protein_source_file_digest_;
}
inline ::std::string* phd_header::release_phdhdr_protein_source_file_digest() {
  clear_has_phdhdr_protein_source_file_digest();
  if (phdhdr_protein_source_file_digest_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = phdhdr_protein_source_file_digest_;
    phdhdr_protein_source_file_digest_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void phd_header::set_allocated_phdhdr_protein_source_file_digest(::std::string* phdhdr_protein_source_file_digest) {
  if (phdhdr_protein_source_file_digest_ != &::google::protobuf::internal::kEmptyString) {
    delete phdhdr_protein_source_file_digest_;
  }
  if (phdhdr_protein_source_file_digest) {
    set_has_phdhdr_protein_source_file_digest();
    phdhdr_protein_source_file_digest_ = phdhdr_protein_source_file_digest;
  } else {
    clear_has_phdhdr_protein_source_file_digest();
    phdhdr_protein_source_file_digest_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 phdhdr_num_proteins = 4;
inline bool phd_header::has_phdhdr_num_proteins() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void phd_header::set_has_phdhdr_num_proteins() {
  _has_bits_[0] |= 0x00000008u;
}
inline void phd_header::clear_has_phdhdr_num_proteins() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void phd_header::clear_phdhdr_num_proteins() {
  phdhdr_num_proteins_ = 0;
  clear_has_phdhdr_num_proteins();
}
inline ::google::protobuf::int32 phd_header::phdhdr_num_proteins() const {
  return phdhdr_num_proteins_;
}
inline void phd_header::set_phdhdr_num_proteins(::google::protobuf::int32 value) {
  set_has_phdhdr_num_proteins();
  phdhdr_num_proteins_ = value;
}

// required string phdhdr_hash_file_name = 5;
inline bool phd_header::has_phdhdr_hash_file_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void phd_header::set_has_phdhdr_hash_file_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void phd_header::clear_has_phdhdr_hash_file_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void phd_header::clear_phdhdr_hash_file_name() {
  if (phdhdr_hash_file_name_ != &::google::protobuf::internal::kEmptyString) {
    phdhdr_hash_file_name_->clear();
  }
  clear_has_phdhdr_hash_file_name();
}
inline const ::std::string& phd_header::phdhdr_hash_file_name() const {
  return *phdhdr_hash_file_name_;
}
inline void phd_header::set_phdhdr_hash_file_name(const ::std::string& value) {
  set_has_phdhdr_hash_file_name();
  if (phdhdr_hash_file_name_ == &::google::protobuf::internal::kEmptyString) {
    phdhdr_hash_file_name_ = new ::std::string;
  }
  phdhdr_hash_file_name_->assign(value);
}
inline void phd_header::set_phdhdr_hash_file_name(const char* value) {
  set_has_phdhdr_hash_file_name();
  if (phdhdr_hash_file_name_ == &::google::protobuf::internal::kEmptyString) {
    phdhdr_hash_file_name_ = new ::std::string;
  }
  phdhdr_hash_file_name_->assign(value);
}
inline void phd_header::set_phdhdr_hash_file_name(const char* value, size_t size) {
  set_has_phdhdr_hash_file_name();
  if (phdhdr_hash_file_name_ == &::google::protobuf::internal::kEmptyString) {
    phdhdr_hash_file_name_ = new ::std::string;
  }
  phdhdr_hash_file_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* phd_header::mutable_phdhdr_hash_file_name() {
  set_has_phdhdr_hash_file_name();
  if (phdhdr_hash_file_name_ == &::google::protobuf::internal::kEmptyString) {
    phdhdr_hash_file_name_ = new ::std::string;
  }
  return phdhdr_hash_file_name_;
}
inline ::std::string* phd_header::release_phdhdr_hash_file_name() {
  clear_has_phdhdr_hash_file_name();
  if (phdhdr_hash_file_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = phdhdr_hash_file_name_;
    phdhdr_hash_file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void phd_header::set_allocated_phdhdr_hash_file_name(::std::string* phdhdr_hash_file_name) {
  if (phdhdr_hash_file_name_ != &::google::protobuf::internal::kEmptyString) {
    delete phdhdr_hash_file_name_;
  }
  if (phdhdr_hash_file_name) {
    set_has_phdhdr_hash_file_name();
    phdhdr_hash_file_name_ = phdhdr_hash_file_name;
  } else {
    clear_has_phdhdr_hash_file_name();
    phdhdr_hash_file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string phdhdr_hash_file_digest = 6;
inline bool phd_header::has_phdhdr_hash_file_digest() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void phd_header::set_has_phdhdr_hash_file_digest() {
  _has_bits_[0] |= 0x00000020u;
}
inline void phd_header::clear_has_phdhdr_hash_file_digest() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void phd_header::clear_phdhdr_hash_file_digest() {
  if (phdhdr_hash_file_digest_ != &::google::protobuf::internal::kEmptyString) {
    phdhdr_hash_file_digest_->clear();
  }
  clear_has_phdhdr_hash_file_digest();
}
inline const ::std::string& phd_header::phdhdr_hash_file_digest() const {
  return *phdhdr_hash_file_digest_;
}
inline void phd_header::set_phdhdr_hash_file_digest(const ::std::string& value) {
  set_has_phdhdr_hash_file_digest();
  if (phdhdr_hash_file_digest_ == &::google::protobuf::internal::kEmptyString) {
    phdhdr_hash_file_digest_ = new ::std::string;
  }
  phdhdr_hash_file_digest_->assign(value);
}
inline void phd_header::set_phdhdr_hash_file_digest(const char* value) {
  set_has_phdhdr_hash_file_digest();
  if (phdhdr_hash_file_digest_ == &::google::protobuf::internal::kEmptyString) {
    phdhdr_hash_file_digest_ = new ::std::string;
  }
  phdhdr_hash_file_digest_->assign(value);
}
inline void phd_header::set_phdhdr_hash_file_digest(const char* value, size_t size) {
  set_has_phdhdr_hash_file_digest();
  if (phdhdr_hash_file_digest_ == &::google::protobuf::internal::kEmptyString) {
    phdhdr_hash_file_digest_ = new ::std::string;
  }
  phdhdr_hash_file_digest_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* phd_header::mutable_phdhdr_hash_file_digest() {
  set_has_phdhdr_hash_file_digest();
  if (phdhdr_hash_file_digest_ == &::google::protobuf::internal::kEmptyString) {
    phdhdr_hash_file_digest_ = new ::std::string;
  }
  return phdhdr_hash_file_digest_;
}
inline ::std::string* phd_header::release_phdhdr_hash_file_digest() {
  clear_has_phdhdr_hash_file_digest();
  if (phdhdr_hash_file_digest_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = phdhdr_hash_file_digest_;
    phdhdr_hash_file_digest_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void phd_header::set_allocated_phdhdr_hash_file_digest(::std::string* phdhdr_hash_file_digest) {
  if (phdhdr_hash_file_digest_ != &::google::protobuf::internal::kEmptyString) {
    delete phdhdr_hash_file_digest_;
  }
  if (phdhdr_hash_file_digest) {
    set_has_phdhdr_hash_file_digest();
    phdhdr_hash_file_digest_ = phdhdr_hash_file_digest;
  } else {
    clear_has_phdhdr_hash_file_digest();
    phdhdr_hash_file_digest_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string phdhdr_precut_amino = 7;
inline bool phd_header::has_phdhdr_precut_amino() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void phd_header::set_has_phdhdr_precut_amino() {
  _has_bits_[0] |= 0x00000040u;
}
inline void phd_header::clear_has_phdhdr_precut_amino() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void phd_header::clear_phdhdr_precut_amino() {
  if (phdhdr_precut_amino_ != &::google::protobuf::internal::kEmptyString) {
    phdhdr_precut_amino_->clear();
  }
  clear_has_phdhdr_precut_amino();
}
inline const ::std::string& phd_header::phdhdr_precut_amino() const {
  return *phdhdr_precut_amino_;
}
inline void phd_header::set_phdhdr_precut_amino(const ::std::string& value) {
  set_has_phdhdr_precut_amino();
  if (phdhdr_precut_amino_ == &::google::protobuf::internal::kEmptyString) {
    phdhdr_precut_amino_ = new ::std::string;
  }
  phdhdr_precut_amino_->assign(value);
}
inline void phd_header::set_phdhdr_precut_amino(const char* value) {
  set_has_phdhdr_precut_amino();
  if (phdhdr_precut_amino_ == &::google::protobuf::internal::kEmptyString) {
    phdhdr_precut_amino_ = new ::std::string;
  }
  phdhdr_precut_amino_->assign(value);
}
inline void phd_header::set_phdhdr_precut_amino(const char* value, size_t size) {
  set_has_phdhdr_precut_amino();
  if (phdhdr_precut_amino_ == &::google::protobuf::internal::kEmptyString) {
    phdhdr_precut_amino_ = new ::std::string;
  }
  phdhdr_precut_amino_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* phd_header::mutable_phdhdr_precut_amino() {
  set_has_phdhdr_precut_amino();
  if (phdhdr_precut_amino_ == &::google::protobuf::internal::kEmptyString) {
    phdhdr_precut_amino_ = new ::std::string;
  }
  return phdhdr_precut_amino_;
}
inline ::std::string* phd_header::release_phdhdr_precut_amino() {
  clear_has_phdhdr_precut_amino();
  if (phdhdr_precut_amino_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = phdhdr_precut_amino_;
    phdhdr_precut_amino_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void phd_header::set_allocated_phdhdr_precut_amino(::std::string* phdhdr_precut_amino) {
  if (phdhdr_precut_amino_ != &::google::protobuf::internal::kEmptyString) {
    delete phdhdr_precut_amino_;
  }
  if (phdhdr_precut_amino) {
    set_has_phdhdr_precut_amino();
    phdhdr_precut_amino_ = phdhdr_precut_amino;
  } else {
    clear_has_phdhdr_precut_amino();
    phdhdr_precut_amino_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string phdhdr_postcut_amino = 8;
inline bool phd_header::has_phdhdr_postcut_amino() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void phd_header::set_has_phdhdr_postcut_amino() {
  _has_bits_[0] |= 0x00000080u;
}
inline void phd_header::clear_has_phdhdr_postcut_amino() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void phd_header::clear_phdhdr_postcut_amino() {
  if (phdhdr_postcut_amino_ != &::google::protobuf::internal::kEmptyString) {
    phdhdr_postcut_amino_->clear();
  }
  clear_has_phdhdr_postcut_amino();
}
inline const ::std::string& phd_header::phdhdr_postcut_amino() const {
  return *phdhdr_postcut_amino_;
}
inline void phd_header::set_phdhdr_postcut_amino(const ::std::string& value) {
  set_has_phdhdr_postcut_amino();
  if (phdhdr_postcut_amino_ == &::google::protobuf::internal::kEmptyString) {
    phdhdr_postcut_amino_ = new ::std::string;
  }
  phdhdr_postcut_amino_->assign(value);
}
inline void phd_header::set_phdhdr_postcut_amino(const char* value) {
  set_has_phdhdr_postcut_amino();
  if (phdhdr_postcut_amino_ == &::google::protobuf::internal::kEmptyString) {
    phdhdr_postcut_amino_ = new ::std::string;
  }
  phdhdr_postcut_amino_->assign(value);
}
inline void phd_header::set_phdhdr_postcut_amino(const char* value, size_t size) {
  set_has_phdhdr_postcut_amino();
  if (phdhdr_postcut_amino_ == &::google::protobuf::internal::kEmptyString) {
    phdhdr_postcut_amino_ = new ::std::string;
  }
  phdhdr_postcut_amino_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* phd_header::mutable_phdhdr_postcut_amino() {
  set_has_phdhdr_postcut_amino();
  if (phdhdr_postcut_amino_ == &::google::protobuf::internal::kEmptyString) {
    phdhdr_postcut_amino_ = new ::std::string;
  }
  return phdhdr_postcut_amino_;
}
inline ::std::string* phd_header::release_phdhdr_postcut_amino() {
  clear_has_phdhdr_postcut_amino();
  if (phdhdr_postcut_amino_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = phdhdr_postcut_amino_;
    phdhdr_postcut_amino_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void phd_header::set_allocated_phdhdr_postcut_amino(::std::string* phdhdr_postcut_amino) {
  if (phdhdr_postcut_amino_ != &::google::protobuf::internal::kEmptyString) {
    delete phdhdr_postcut_amino_;
  }
  if (phdhdr_postcut_amino) {
    set_has_phdhdr_postcut_amino();
    phdhdr_postcut_amino_ = phdhdr_postcut_amino;
  } else {
    clear_has_phdhdr_postcut_amino();
    phdhdr_postcut_amino_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string phdhdr_prenocut_amino = 9;
inline bool phd_header::has_phdhdr_prenocut_amino() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void phd_header::set_has_phdhdr_prenocut_amino() {
  _has_bits_[0] |= 0x00000100u;
}
inline void phd_header::clear_has_phdhdr_prenocut_amino() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void phd_header::clear_phdhdr_prenocut_amino() {
  if (phdhdr_prenocut_amino_ != &::google::protobuf::internal::kEmptyString) {
    phdhdr_prenocut_amino_->clear();
  }
  clear_has_phdhdr_prenocut_amino();
}
inline const ::std::string& phd_header::phdhdr_prenocut_amino() const {
  return *phdhdr_prenocut_amino_;
}
inline void phd_header::set_phdhdr_prenocut_amino(const ::std::string& value) {
  set_has_phdhdr_prenocut_amino();
  if (phdhdr_prenocut_amino_ == &::google::protobuf::internal::kEmptyString) {
    phdhdr_prenocut_amino_ = new ::std::string;
  }
  phdhdr_prenocut_amino_->assign(value);
}
inline void phd_header::set_phdhdr_prenocut_amino(const char* value) {
  set_has_phdhdr_prenocut_amino();
  if (phdhdr_prenocut_amino_ == &::google::protobuf::internal::kEmptyString) {
    phdhdr_prenocut_amino_ = new ::std::string;
  }
  phdhdr_prenocut_amino_->assign(value);
}
inline void phd_header::set_phdhdr_prenocut_amino(const char* value, size_t size) {
  set_has_phdhdr_prenocut_amino();
  if (phdhdr_prenocut_amino_ == &::google::protobuf::internal::kEmptyString) {
    phdhdr_prenocut_amino_ = new ::std::string;
  }
  phdhdr_prenocut_amino_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* phd_header::mutable_phdhdr_prenocut_amino() {
  set_has_phdhdr_prenocut_amino();
  if (phdhdr_prenocut_amino_ == &::google::protobuf::internal::kEmptyString) {
    phdhdr_prenocut_amino_ = new ::std::string;
  }
  return phdhdr_prenocut_amino_;
}
inline ::std::string* phd_header::release_phdhdr_prenocut_amino() {
  clear_has_phdhdr_prenocut_amino();
  if (phdhdr_prenocut_amino_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = phdhdr_prenocut_amino_;
    phdhdr_prenocut_amino_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void phd_header::set_allocated_phdhdr_prenocut_amino(::std::string* phdhdr_prenocut_amino) {
  if (phdhdr_prenocut_amino_ != &::google::protobuf::internal::kEmptyString) {
    delete phdhdr_prenocut_amino_;
  }
  if (phdhdr_prenocut_amino) {
    set_has_phdhdr_prenocut_amino();
    phdhdr_prenocut_amino_ = phdhdr_prenocut_amino;
  } else {
    clear_has_phdhdr_prenocut_amino();
    phdhdr_prenocut_amino_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string phdhdr_postnocut_amino = 10;
inline bool phd_header::has_phdhdr_postnocut_amino() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void phd_header::set_has_phdhdr_postnocut_amino() {
  _has_bits_[0] |= 0x00000200u;
}
inline void phd_header::clear_has_phdhdr_postnocut_amino() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void phd_header::clear_phdhdr_postnocut_amino() {
  if (phdhdr_postnocut_amino_ != &::google::protobuf::internal::kEmptyString) {
    phdhdr_postnocut_amino_->clear();
  }
  clear_has_phdhdr_postnocut_amino();
}
inline const ::std::string& phd_header::phdhdr_postnocut_amino() const {
  return *phdhdr_postnocut_amino_;
}
inline void phd_header::set_phdhdr_postnocut_amino(const ::std::string& value) {
  set_has_phdhdr_postnocut_amino();
  if (phdhdr_postnocut_amino_ == &::google::protobuf::internal::kEmptyString) {
    phdhdr_postnocut_amino_ = new ::std::string;
  }
  phdhdr_postnocut_amino_->assign(value);
}
inline void phd_header::set_phdhdr_postnocut_amino(const char* value) {
  set_has_phdhdr_postnocut_amino();
  if (phdhdr_postnocut_amino_ == &::google::protobuf::internal::kEmptyString) {
    phdhdr_postnocut_amino_ = new ::std::string;
  }
  phdhdr_postnocut_amino_->assign(value);
}
inline void phd_header::set_phdhdr_postnocut_amino(const char* value, size_t size) {
  set_has_phdhdr_postnocut_amino();
  if (phdhdr_postnocut_amino_ == &::google::protobuf::internal::kEmptyString) {
    phdhdr_postnocut_amino_ = new ::std::string;
  }
  phdhdr_postnocut_amino_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* phd_header::mutable_phdhdr_postnocut_amino() {
  set_has_phdhdr_postnocut_amino();
  if (phdhdr_postnocut_amino_ == &::google::protobuf::internal::kEmptyString) {
    phdhdr_postnocut_amino_ = new ::std::string;
  }
  return phdhdr_postnocut_amino_;
}
inline ::std::string* phd_header::release_phdhdr_postnocut_amino() {
  clear_has_phdhdr_postnocut_amino();
  if (phdhdr_postnocut_amino_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = phdhdr_postnocut_amino_;
    phdhdr_postnocut_amino_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void phd_header::set_allocated_phdhdr_postnocut_amino(::std::string* phdhdr_postnocut_amino) {
  if (phdhdr_postnocut_amino_ != &::google::protobuf::internal::kEmptyString) {
    delete phdhdr_postnocut_amino_;
  }
  if (phdhdr_postnocut_amino) {
    set_has_phdhdr_postnocut_amino();
    phdhdr_postnocut_amino_ = phdhdr_postnocut_amino;
  } else {
    clear_has_phdhdr_postnocut_amino();
    phdhdr_postnocut_amino_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 phdhdr_missed_cleavage = 11;
inline bool phd_header::has_phdhdr_missed_cleavage() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void phd_header::set_has_phdhdr_missed_cleavage() {
  _has_bits_[0] |= 0x00000400u;
}
inline void phd_header::clear_has_phdhdr_missed_cleavage() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void phd_header::clear_phdhdr_missed_cleavage() {
  phdhdr_missed_cleavage_ = 0;
  clear_has_phdhdr_missed_cleavage();
}
inline ::google::protobuf::int32 phd_header::phdhdr_missed_cleavage() const {
  return phdhdr_missed_cleavage_;
}
inline void phd_header::set_phdhdr_missed_cleavage(::google::protobuf::int32 value) {
  set_has_phdhdr_missed_cleavage();
  phdhdr_missed_cleavage_ = value;
}

// required int32 phdhdr_semi_tryptic = 12;
inline bool phd_header::has_phdhdr_semi_tryptic() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void phd_header::set_has_phdhdr_semi_tryptic() {
  _has_bits_[0] |= 0x00000800u;
}
inline void phd_header::clear_has_phdhdr_semi_tryptic() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void phd_header::clear_phdhdr_semi_tryptic() {
  phdhdr_semi_tryptic_ = 0;
  clear_has_phdhdr_semi_tryptic();
}
inline ::google::protobuf::int32 phd_header::phdhdr_semi_tryptic() const {
  return phdhdr_semi_tryptic_;
}
inline void phd_header::set_phdhdr_semi_tryptic(::google::protobuf::int32 value) {
  set_has_phdhdr_semi_tryptic();
  phdhdr_semi_tryptic_ = value;
}

// -------------------------------------------------------------------

// phd_peptide_mass

// required int32 phdpmass_mass = 1;
inline bool phd_peptide_mass::has_phdpmass_mass() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void phd_peptide_mass::set_has_phdpmass_mass() {
  _has_bits_[0] |= 0x00000001u;
}
inline void phd_peptide_mass::clear_has_phdpmass_mass() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void phd_peptide_mass::clear_phdpmass_mass() {
  phdpmass_mass_ = 0;
  clear_has_phdpmass_mass();
}
inline ::google::protobuf::int32 phd_peptide_mass::phdpmass_mass() const {
  return phdpmass_mass_;
}
inline void phd_peptide_mass::set_phdpmass_mass(::google::protobuf::int32 value) {
  set_has_phdpmass_mass();
  phdpmass_mass_ = value;
}

// repeated .peptide_hash_database.phd_peptide phdpmass_peptide_list = 2;
inline int phd_peptide_mass::phdpmass_peptide_list_size() const {
  return phdpmass_peptide_list_.size();
}
inline void phd_peptide_mass::clear_phdpmass_peptide_list() {
  phdpmass_peptide_list_.Clear();
}
inline const ::peptide_hash_database::phd_peptide& phd_peptide_mass::phdpmass_peptide_list(int index) const {
  return phdpmass_peptide_list_.Get(index);
}
inline ::peptide_hash_database::phd_peptide* phd_peptide_mass::mutable_phdpmass_peptide_list(int index) {
  return phdpmass_peptide_list_.Mutable(index);
}
inline ::peptide_hash_database::phd_peptide* phd_peptide_mass::add_phdpmass_peptide_list() {
  return phdpmass_peptide_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::peptide_hash_database::phd_peptide >&
phd_peptide_mass::phdpmass_peptide_list() const {
  return phdpmass_peptide_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::peptide_hash_database::phd_peptide >*
phd_peptide_mass::mutable_phdpmass_peptide_list() {
  return &phdpmass_peptide_list_;
}

// -------------------------------------------------------------------

// phd_file

// required .peptide_hash_database.phd_header phdhdr = 1;
inline bool phd_file::has_phdhdr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void phd_file::set_has_phdhdr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void phd_file::clear_has_phdhdr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void phd_file::clear_phdhdr() {
  if (phdhdr_ != NULL) phdhdr_->::peptide_hash_database::phd_header::Clear();
  clear_has_phdhdr();
}
inline const ::peptide_hash_database::phd_header& phd_file::phdhdr() const {
  return phdhdr_ != NULL ? *phdhdr_ : *default_instance_->phdhdr_;
}
inline ::peptide_hash_database::phd_header* phd_file::mutable_phdhdr() {
  set_has_phdhdr();
  if (phdhdr_ == NULL) phdhdr_ = new ::peptide_hash_database::phd_header;
  return phdhdr_;
}
inline ::peptide_hash_database::phd_header* phd_file::release_phdhdr() {
  clear_has_phdhdr();
  ::peptide_hash_database::phd_header* temp = phdhdr_;
  phdhdr_ = NULL;
  return temp;
}
inline void phd_file::set_allocated_phdhdr(::peptide_hash_database::phd_header* phdhdr) {
  delete phdhdr_;
  phdhdr_ = phdhdr;
  if (phdhdr) {
    set_has_phdhdr();
  } else {
    clear_has_phdhdr();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace peptide_hash_database

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::peptide_hash_database::phd_peptide_peptide_type>() {
  return ::peptide_hash_database::phd_peptide_peptide_type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_protein_5fpep_5fhash_2eproto__INCLUDED
